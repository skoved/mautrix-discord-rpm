From 5e80dae81f03d14b21ddf53b2f8aec245c1a0b6f Mon Sep 17 00:00:00 2001
From: "Kai A. Hiller" <V02460@gmail.com>
Date: Thu, 11 Apr 2024 23:09:31 +0200
Subject: [PATCH] Unvendor crypto/canonicaljson

---
 crypto/canonicaljson/README.md    |   6 -
 crypto/canonicaljson/json.go      | 257 ------------------------------
 crypto/canonicaljson/json_test.go |  91 -----------
 crypto/goolm/pk/signing.go        |   2 +-
 crypto/olm/account.go             |   2 +-
 crypto/olm/account_goolm.go       |   2 +-
 crypto/olm/pk_libolm.go           |   2 +-
 crypto/signatures/signatures.go   |   2 +-
 crypto/verificationhelper/sas.go  |   2 +-
 federation/signingkey.go          |   2 +-
 go.mod                            |   4 +
 responses_test.go                 |   2 +-
 12 files changed, 12 insertions(+), 362 deletions(-)
 delete mode 100644 crypto/canonicaljson/README.md
 delete mode 100644 crypto/canonicaljson/json.go
 delete mode 100644 crypto/canonicaljson/json_test.go

diff --git a/crypto/canonicaljson/README.md b/crypto/canonicaljson/README.md
deleted file mode 100644
index da9d71f..0000000
--- a/crypto/canonicaljson/README.md
+++ /dev/null
@@ -1,6 +0,0 @@
-# canonicaljson
-This is a Go package to produce Matrix [Canonical JSON](https://matrix.org/docs/spec/appendices#canonical-json).
-It is essentially just [json.go](https://github.com/matrix-org/gomatrixserverlib/blob/master/json.go)
-from gomatrixserverlib without all the other files that are completely useless for non-server use cases.
-
-The original project is licensed under the Apache 2.0 license.
diff --git a/crypto/canonicaljson/json.go b/crypto/canonicaljson/json.go
deleted file mode 100644
index fd296e6..0000000
--- a/crypto/canonicaljson/json.go
+++ /dev/null
@@ -1,257 +0,0 @@
-/* Copyright 2016-2017 Vector Creations Ltd
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package canonicaljson
-
-import (
-	"encoding/binary"
-	"fmt"
-	"sort"
-	"unicode/utf8"
-
-	"github.com/tidwall/gjson"
-)
-
-// CanonicalJSON re-encodes the JSON in a canonical encoding. The encoding is
-// the shortest possible encoding using integer values with sorted object keys.
-// https://matrix.org/docs/spec/appendices#canonical-json
-func CanonicalJSON(input []byte) ([]byte, error) {
-	if !gjson.Valid(string(input)) {
-		return nil, fmt.Errorf("invalid json")
-	}
-
-	return CanonicalJSONAssumeValid(input), nil
-}
-
-// CanonicalJSONAssumeValid is the same as CanonicalJSON, but assumes the
-// input is valid JSON
-func CanonicalJSONAssumeValid(input []byte) []byte {
-	input = CompactJSON(input, make([]byte, 0, len(input)))
-	return SortJSON(input, make([]byte, 0, len(input)))
-}
-
-// SortJSON reencodes the JSON with the object keys sorted by lexicographically
-// by codepoint. The input must be valid JSON.
-func SortJSON(input, output []byte) []byte {
-	result := gjson.ParseBytes(input)
-
-	return sortJSONValue(result, input, output)
-}
-
-// sortJSONValue takes a gjson.Result and sorts it. inputJSON must be the
-// raw JSON bytes that gjson.Result points to.
-func sortJSONValue(input gjson.Result, inputJSON, output []byte) []byte {
-	if input.IsArray() {
-		return sortJSONArray(input, inputJSON, output)
-	}
-
-	if input.IsObject() {
-		return sortJSONObject(input, inputJSON, output)
-	}
-
-	// If its neither an object nor an array then there is no sub structure
-	// to sort, so just append the raw bytes.
-	return append(output, input.Raw...)
-}
-
-// sortJSONArray takes a gjson.Result and sorts it, assuming its an array.
-// inputJSON must be the raw JSON bytes that gjson.Result points to.
-func sortJSONArray(input gjson.Result, inputJSON, output []byte) []byte {
-	sep := byte('[')
-
-	// Iterate over each value in the array and sort it.
-	input.ForEach(func(_, value gjson.Result) bool {
-		output = append(output, sep)
-		sep = ','
-		output = sortJSONValue(value, inputJSON, output)
-		return true // keep iterating
-	})
-
-	if sep == '[' {
-		// If sep is still '[' then the array was empty and we never wrote the
-		// initial '[', so we write it now along with the closing ']'.
-		output = append(output, '[', ']')
-	} else {
-		// Otherwise we end the array by writing a single ']'
-		output = append(output, ']')
-	}
-	return output
-}
-
-// sortJSONObject takes a gjson.Result and sorts it, assuming its an object.
-// inputJSON must be the raw JSON bytes that gjson.Result points to.
-func sortJSONObject(input gjson.Result, inputJSON, output []byte) []byte {
-	type entry struct {
-		key    string // The parsed key string
-		rawKey string // The raw, unparsed key JSON string
-		value  gjson.Result
-	}
-
-	var entries []entry
-
-	// Iterate over each key/value pair and add it to a slice
-	// that we can sort
-	input.ForEach(func(key, value gjson.Result) bool {
-		entries = append(entries, entry{
-			key:    key.String(),
-			rawKey: key.Raw,
-			value:  value,
-		})
-		return true // keep iterating
-	})
-
-	// Sort the slice based on the *parsed* key
-	sort.Slice(entries, func(a, b int) bool {
-		return entries[a].key < entries[b].key
-	})
-
-	sep := byte('{')
-
-	for _, entry := range entries {
-		output = append(output, sep)
-		sep = ','
-
-		// Append the raw unparsed JSON key, *not* the parsed key
-		output = append(output, entry.rawKey...)
-		output = append(output, ':')
-		output = sortJSONValue(entry.value, inputJSON, output)
-	}
-	if sep == '{' {
-		// If sep is still '{' then the object was empty and we never wrote the
-		// initial '{', so we write it now along with the closing '}'.
-		output = append(output, '{', '}')
-	} else {
-		// Otherwise we end the object by writing a single '}'
-		output = append(output, '}')
-	}
-	return output
-}
-
-// CompactJSON makes the encoded JSON as small as possible by removing
-// whitespace and unneeded unicode escapes
-func CompactJSON(input, output []byte) []byte {
-	var i int
-	for i < len(input) {
-		c := input[i]
-		i++
-		// The valid whitespace characters are all less than or equal to SPACE 0x20.
-		// The valid non-white characters are all greater than SPACE 0x20.
-		// So we can check for whitespace by comparing against SPACE 0x20.
-		if c <= ' ' {
-			// Skip over whitespace.
-			continue
-		}
-		// Add the non-whitespace character to the output.
-		output = append(output, c)
-		if c == '"' {
-			// We are inside a string.
-			for i < len(input) {
-				c = input[i]
-				i++
-				// Check if this is an escape sequence.
-				if c == '\\' {
-					escape := input[i]
-					i++
-					if escape == 'u' {
-						// If this is a unicode escape then we need to handle it specially
-						output, i = compactUnicodeEscape(input, output, i)
-					} else if escape == '/' {
-						// JSON does not require escaping '/', but allows encoders to escape it as a special case.
-						// Since the escape isn't required we remove it.
-						output = append(output, escape)
-					} else {
-						// All other permitted escapes are single charater escapes that are already in their shortest form.
-						output = append(output, '\\', escape)
-					}
-				} else {
-					output = append(output, c)
-				}
-				if c == '"' {
-					break
-				}
-			}
-		}
-	}
-	return output
-}
-
-// compactUnicodeEscape unpacks a 4 byte unicode escape starting at index.
-// If the escape is a surrogate pair then decode the 6 byte \uXXXX escape
-// that follows. Returns the output slice and a new input index.
-func compactUnicodeEscape(input, output []byte, index int) ([]byte, int) {
-	const (
-		ESCAPES = "uuuuuuuubtnufruuuuuuuuuuuuuuuuuu"
-		HEX     = "0123456789ABCDEF"
-	)
-	// If there aren't enough bytes to decode the hex escape then return.
-	if len(input)-index < 4 {
-		return output, len(input)
-	}
-	// Decode the 4 hex digits.
-	c := readHexDigits(input[index:])
-	index += 4
-	if c < ' ' {
-		// If the character is less than SPACE 0x20 then it will need escaping.
-		escape := ESCAPES[c]
-		output = append(output, '\\', escape)
-		if escape == 'u' {
-			output = append(output, '0', '0', byte('0'+(c>>4)), HEX[c&0xF])
-		}
-	} else if c == '\\' || c == '"' {
-		// Otherwise the character only needs escaping if it is a QUOTE '"' or BACKSLASH '\\'.
-		output = append(output, '\\', byte(c))
-	} else if c < 0xD800 || c >= 0xE000 {
-		// If the character isn't a surrogate pair then encoded it directly as UTF-8.
-		var buffer [4]byte
-		n := utf8.EncodeRune(buffer[:], rune(c))
-		output = append(output, buffer[:n]...)
-	} else {
-		// Otherwise the escaped character was the first part of a UTF-16 style surrogate pair.
-		// The next 6 bytes MUST be a '\uXXXX'.
-		// If there aren't enough bytes to decode the hex escape then return.
-		if len(input)-index < 6 {
-			return output, len(input)
-		}
-		// Decode the 4 hex digits from the '\uXXXX'.
-		surrogate := readHexDigits(input[index+2:])
-		index += 6
-		// Reconstruct the UCS4 codepoint from the surrogates.
-		codepoint := 0x10000 + (((c & 0x3FF) << 10) | (surrogate & 0x3FF))
-		// Encode the charater as UTF-8.
-		var buffer [4]byte
-		n := utf8.EncodeRune(buffer[:], rune(codepoint))
-		output = append(output, buffer[:n]...)
-	}
-	return output, index
-}
-
-// Read 4 hex digits from the input slice.
-// Taken from https://github.com/NegativeMjark/indolentjson-rust/blob/8b959791fe2656a88f189c5d60d153be05fe3deb/src/readhex.rs#L21
-func readHexDigits(input []byte) uint32 {
-	hex := binary.BigEndian.Uint32(input)
-	// subtract '0'
-	hex -= 0x30303030
-	// strip the higher bits, maps 'a' => 'A'
-	hex &= 0x1F1F1F1F
-	mask := hex & 0x10101010
-	// subtract 'A' - 10 - '9' - 9 = 7 from the letters.
-	hex -= mask >> 1
-	hex += mask >> 4
-	// collect the nibbles
-	hex |= hex >> 4
-	hex &= 0xFF00FF
-	hex |= hex >> 8
-	return hex & 0xFFFF
-}
diff --git a/crypto/canonicaljson/json_test.go b/crypto/canonicaljson/json_test.go
deleted file mode 100644
index d1a7f0a..0000000
--- a/crypto/canonicaljson/json_test.go
+++ /dev/null
@@ -1,91 +0,0 @@
-/* Copyright 2016-2017 Vector Creations Ltd
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package canonicaljson
-
-import (
-	"testing"
-)
-
-func testSortJSON(t *testing.T, input, want string) {
-	got := SortJSON([]byte(input), nil)
-
-	// Squash out the whitespace before comparing the JSON in case SortJSON had inserted whitespace.
-	if string(CompactJSON(got, nil)) != want {
-		t.Errorf("SortJSON(%q): want %q got %q", input, want, got)
-	}
-}
-
-func TestSortJSON(t *testing.T) {
-	testSortJSON(t, `[{"b":"two","a":1}]`, `[{"a":1,"b":"two"}]`)
-	testSortJSON(t, `{"B":{"4":4,"3":3},"A":{"1":1,"2":2}}`,
-		`{"A":{"1":1,"2":2},"B":{"3":3,"4":4}}`)
-	testSortJSON(t, `[true,false,null]`, `[true,false,null]`)
-	testSortJSON(t, `[9007199254740991]`, `[9007199254740991]`)
-	testSortJSON(t, "\t\n[9007199254740991]", `[9007199254740991]`)
-}
-
-func testCompactJSON(t *testing.T, input, want string) {
-	got := string(CompactJSON([]byte(input), nil))
-	if got != want {
-		t.Errorf("CompactJSON(%q): want %q got %q", input, want, got)
-	}
-}
-
-func TestCompactJSON(t *testing.T) {
-	testCompactJSON(t, "{ }", "{}")
-
-	input := `["\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007"]`
-	want := input
-	testCompactJSON(t, input, want)
-
-	input = `["\u0008\u0009\u000A\u000B\u000C\u000D\u000E\u000F"]`
-	want = `["\b\t\n\u000B\f\r\u000E\u000F"]`
-	testCompactJSON(t, input, want)
-
-	input = `["\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017"]`
-	want = input
-	testCompactJSON(t, input, want)
-
-	input = `["\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F"]`
-	want = input
-	testCompactJSON(t, input, want)
-
-	testCompactJSON(t, `["\u0061\u005C\u0042\u0022"]`, `["a\\B\""]`)
-	testCompactJSON(t, `["\u0120"]`, "[\"\u0120\"]")
-	testCompactJSON(t, `["\u0FFF"]`, "[\"\u0FFF\"]")
-	testCompactJSON(t, `["\u1820"]`, "[\"\u1820\"]")
-	testCompactJSON(t, `["\uFFFF"]`, "[\"\uFFFF\"]")
-	testCompactJSON(t, `["\uD842\uDC20"]`, "[\"\U00020820\"]")
-	testCompactJSON(t, `["\uDBFF\uDFFF"]`, "[\"\U0010FFFF\"]")
-
-	testCompactJSON(t, `["\"\\\/"]`, `["\"\\/"]`)
-}
-
-func testReadHex(t *testing.T, input string, want uint32) {
-	got := readHexDigits([]byte(input))
-	if want != got {
-		t.Errorf("readHexDigits(%q): want 0x%x got 0x%x", input, want, got)
-	}
-}
-
-func TestReadHex(t *testing.T) {
-	testReadHex(t, "0123", 0x0123)
-	testReadHex(t, "4567", 0x4567)
-	testReadHex(t, "89AB", 0x89AB)
-	testReadHex(t, "CDEF", 0xCDEF)
-	testReadHex(t, "89ab", 0x89AB)
-	testReadHex(t, "cdef", 0xCDEF)
-}
diff --git a/crypto/goolm/pk/signing.go b/crypto/goolm/pk/signing.go
index a98330d..4c46016 100644
--- a/crypto/goolm/pk/signing.go
+++ b/crypto/goolm/pk/signing.go
@@ -6,7 +6,7 @@ import (
 
 	"github.com/tidwall/sjson"
 
-	"maunium.net/go/mautrix/crypto/canonicaljson"
+	canonicaljson "github.com/matrix-org/gomatrixserverlib"
 	"maunium.net/go/mautrix/crypto/goolm"
 	"maunium.net/go/mautrix/crypto/goolm/crypto"
 	"maunium.net/go/mautrix/id"
diff --git a/crypto/olm/account.go b/crypto/olm/account.go
index 37458d1..ef7984f 100644
--- a/crypto/olm/account.go
+++ b/crypto/olm/account.go
@@ -15,7 +15,7 @@ import (
 	"github.com/tidwall/gjson"
 	"github.com/tidwall/sjson"
 
-	"maunium.net/go/mautrix/crypto/canonicaljson"
+	canonicaljson "github.com/matrix-org/gomatrixserverlib"
 	"maunium.net/go/mautrix/id"
 )
 
diff --git a/crypto/olm/account_goolm.go b/crypto/olm/account_goolm.go
index eeff54f..6bd8ecf 100644
--- a/crypto/olm/account_goolm.go
+++ b/crypto/olm/account_goolm.go
@@ -7,7 +7,7 @@ import (
 
 	"github.com/tidwall/sjson"
 
-	"maunium.net/go/mautrix/crypto/canonicaljson"
+	canonicaljson "github.com/matrix-org/gomatrixserverlib"
 	"maunium.net/go/mautrix/crypto/goolm/account"
 	"maunium.net/go/mautrix/id"
 )
diff --git a/crypto/olm/pk_libolm.go b/crypto/olm/pk_libolm.go
index 0854b4d..e817f46 100644
--- a/crypto/olm/pk_libolm.go
+++ b/crypto/olm/pk_libolm.go
@@ -20,7 +20,7 @@ import (
 
 	"github.com/tidwall/sjson"
 
-	"maunium.net/go/mautrix/crypto/canonicaljson"
+	canonicaljson "github.com/matrix-org/gomatrixserverlib"
 	"maunium.net/go/mautrix/id"
 )
 
diff --git a/crypto/signatures/signatures.go b/crypto/signatures/signatures.go
index 0c4422f..6b6c201 100644
--- a/crypto/signatures/signatures.go
+++ b/crypto/signatures/signatures.go
@@ -16,7 +16,7 @@ import (
 	"github.com/tidwall/sjson"
 	"go.mau.fi/util/exgjson"
 
-	"maunium.net/go/mautrix/crypto/canonicaljson"
+	canonicaljson "github.com/matrix-org/gomatrixserverlib"
 	"maunium.net/go/mautrix/crypto/goolm/crypto"
 	"maunium.net/go/mautrix/id"
 )
diff --git a/crypto/verificationhelper/sas.go b/crypto/verificationhelper/sas.go
index 8160a4e..5cf300e 100644
--- a/crypto/verificationhelper/sas.go
+++ b/crypto/verificationhelper/sas.go
@@ -23,7 +23,7 @@ import (
 	"golang.org/x/crypto/hkdf"
 	"golang.org/x/exp/slices"
 
-	"maunium.net/go/mautrix/crypto/canonicaljson"
+	canonicaljson "github.com/matrix-org/gomatrixserverlib"
 	"maunium.net/go/mautrix/event"
 	"maunium.net/go/mautrix/id"
 )
diff --git a/federation/signingkey.go b/federation/signingkey.go
index 3d11823..451012f 100644
--- a/federation/signingkey.go
+++ b/federation/signingkey.go
@@ -16,7 +16,7 @@ import (
 
 	"go.mau.fi/util/jsontime"
 
-	"maunium.net/go/mautrix/crypto/canonicaljson"
+	canonicaljson "github.com/matrix-org/gomatrixserverlib"
 	"maunium.net/go/mautrix/id"
 )
 
diff --git a/go.mod b/go.mod
index 5afaff8..e744849 100644
--- a/go.mod
+++ b/go.mod
@@ -6,6 +6,7 @@ require (
 	github.com/gorilla/mux v1.8.0
 	github.com/gorilla/websocket v1.5.0
 	github.com/lib/pq v1.10.9
+	github.com/matrix-org/gomatrixserverlib v0.0.0-20240328203753-c2391f7113a5
 	github.com/mattn/go-sqlite3 v1.14.22
 	github.com/rs/zerolog v1.32.0
 	github.com/stretchr/testify v1.9.0
@@ -24,9 +25,12 @@ require (
 require (
 	github.com/coreos/go-systemd/v22 v22.5.0 // indirect
 	github.com/davecgh/go-spew v1.1.1 // indirect
+	github.com/kr/pretty v0.2.1 // indirect
+	github.com/matrix-org/util v0.0.0-20200807132607-55161520e1d4 // indirect
 	github.com/mattn/go-colorable v0.1.13 // indirect
 	github.com/mattn/go-isatty v0.0.19 // indirect
 	github.com/pmezard/go-difflib v1.0.0 // indirect
+	github.com/sirupsen/logrus v1.9.0 // indirect
 	github.com/tidwall/match v1.1.1 // indirect
 	github.com/tidwall/pretty v1.2.0 // indirect
 	golang.org/x/sys v0.19.0 // indirect
diff --git a/responses_test.go b/responses_test.go
index b23d85a..4489228 100644
--- a/responses_test.go
+++ b/responses_test.go
@@ -15,7 +15,7 @@ import (
 	"github.com/stretchr/testify/require"
 
 	"maunium.net/go/mautrix"
-	"maunium.net/go/mautrix/crypto/canonicaljson"
+	canonicaljson "github.com/matrix-org/gomatrixserverlib"
 )
 
 const sampleData = `{
-- 
2.44.0

